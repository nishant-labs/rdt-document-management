{"version":3,"sources":["hoc/withConsumers.js","reportWebVitals.js","constants/endpoints.js","utils/http.js","context/env-config-context/env-config-context.js","context/gdp-context/gdp-context.js","context/gdp-context/selectors.js","context/population-context/population-context.js","context/population-context/selectors.js","components/search-box/search-box-view.js","layout/app-container/app-container.js","layout/theme-provider/app-theme-provider.js","components/TypographyWithBox/index.js","context/shared/selectors.js","components/statistics-table/grid-table.js","utils/number.js","components/app-management/rdt-management-app.js","index.js"],"names":["WrappedComponent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","STATS_TYPE","fetchApiData","url","options","a","fetch","response","ok","headers","get","indexOf","json","text","payload","message","error","status","endpointTemplate","template","interpolate","fetchPopulationFromWorldBank","baseUrl","fullYear","populationEndpoint","countryId","statsType","fetchGDPFromWorldBank","fetchEnvConfig","EnvConfigContext","React","createContext","EnvConfigContextProvider","children","useState","envConfigData","setEnvConfigData","setError","useEffect","Provider","value","GdpContext","GdpContextConsumer","Consumer","GdpContextProvider","useContext","gdpData","setGdpData","gdpApiError","setGdpApiError","fetchGdp","useCallback","resetGdpData","undefined","selectFormattedGdp","createSelector","state","indicators","reduce","result","indicator","countryiso3code","countryName","country","gdp","PopulationContext","PopulationContextConsumer","PopulationContextProvider","populationData","setPopulationData","populationApiError","setPopulationApiError","fetchPopulation","resetPopulationData","selectFormattedPopulation","population","SearchBoxView","hasError","setHasError","searchValue","setSearchValue","isTouched","setIsTouched","handleBlur","handleChange","target","isInValid","length","isNaN","handleSearchClick","showError","isButtonDisabled","Box","display","flexDirection","justifyContent","p","m","TextField","onBlur","onChange","variant","label","helperText","fullWidth","required","Button","color","disabled","onClick","AppLayoutContainer","CssBaseline","Container","maxWidth","bgcolor","css","width","height","theme","createMuiTheme","overrides","MuiTypography","h1","fontSize","fontWeight","useStyles","makeStyles","root","AppThemeProvider","classes","className","ThemeProvider","TypographyWithBox","type","Typography","gutterBottom","selectTableData","gdpIndicators","populationIndicators","Object","keys","map","countryCode","defaultColDef","sortable","filter","gdpCurrencyFormatter","cellData","amount","Intl","NumberFormat","style","currency","format","populationFormatter","number","GridTableContainer","rowData","headerName","field","sort","valueFormatter","RDTAppManagement","this","props","hasErrors","isDataNotAvailable","Component","withConsumers","gdpProps","populationProps","ReactDOM","render","StrictMode","document","getElementById","console","log"],"mappings":"iLAI8BA,E,gCCQfC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,6GCJDQ,EACC,cADDA,EAEN,iBCFDC,EAAY,uCAAG,WAAOC,EAAKC,GAAZ,mBAAAC,EAAA,sEACIC,MAAMH,EAAKC,GADf,YACbG,EADa,QAGNC,GAHM,qBAKuD,IAAtED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,oBAL9B,iCAMLJ,EAASK,OANJ,4DAOLL,EAASM,OAPJ,mCAIXC,EAJW,uBAQV,CAAEA,YARQ,yBAUGP,EAASK,OAVZ,eAUbG,EAVa,yBAWZ,CACLC,MAAO,CACLC,OAAQV,EAASU,OACjBF,aAde,4CAAH,wDAmBZG,EAAmBC,IDrBvB,kFCqBwD,CACxDC,YAAa,kBAGFC,EAA4B,uCAAG,WAAOC,EAASC,GAAhB,eAAAlB,EAAA,6DACpCmB,EAAqBN,EAAiB,CAC1CI,UACAG,UAAW,MACXC,UAAWzB,EACXsB,aALwC,SAQ7BrB,EAAasB,GARgB,mFAAH,wDAW5BG,EAAqB,uCAAG,WAAOL,EAASC,GAAhB,eAAAlB,EAAA,6DAC7BmB,EAAqBN,EAAiB,CAC1CI,UACAG,UAAW,MACXC,UAAWzB,EACXsB,aALiC,SAQtBrB,EAAasB,GARS,mFAAH,wDAWrBI,EAAc,uCAAG,sBAAAvB,EAAA,sEACtBH,EAAa,sBADS,mFAAH,qD,OC7Cd2B,EAAmBC,IAAMC,gBAEzBC,EAA2B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACdC,qBADc,mBACjDC,EADiD,KAClCC,EADkC,OAE9BF,qBAF8B,mBAEjDlB,EAFiD,KAE1CqB,EAF0C,KAWxD,OAPAC,qBAAU,WACRV,IAAiBjC,MAAK,YAAyB,IAAtBqB,EAAqB,EAArBA,MAAOF,EAAc,EAAdA,QAC9BsB,EAAiBtB,GACjBuB,EAASrB,QAEV,IAGD,eAACa,EAAiBU,SAAlB,CAA2BC,MAAO,CAAEL,gBAAenB,SAAnD,UACGmB,EAAgBF,EAAW,iDAC3BjB,GAAS,iFCfHyB,EAAaX,IAAMC,gBACnBW,EAAqBD,EAAWE,SAEhCC,EAAqB,SAAC,GAAkB,IAAhBX,EAAe,EAAfA,SAC3BE,EAAkBU,qBAAWhB,GAA7BM,cAD0C,EAEpBD,qBAFoB,mBAE3CY,EAF2C,KAElCC,EAFkC,OAGZb,qBAHY,mBAG3Cc,EAH2C,KAG9BC,EAH8B,KAK5CC,EAAWC,sBAAW,uCAC1B,WAAO5B,GAAP,mBAAAlB,EAAA,sEACmCsB,EAC/BQ,EAAcb,QACdC,GAHJ,gBACUP,EADV,EACUA,MAAOF,EADjB,EACiBA,QAIfiC,EAAWjC,GACXmC,EAAejC,GANjB,2CAD0B,sDAS1B,CAACmB,IAGGiB,EAAeD,uBAAY,WAC/BJ,OAAWM,GACXJ,OAAeI,KACd,IAEH,OACE,cAACZ,EAAWF,SAAZ,CACEC,MAAO,CAAEM,UAASE,cAAaE,WAAUE,gBAD3C,SAGGnB,K,yCC7BMqB,EAAqBC,aAFT,SAACC,GAAD,OAAW9C,IAAI8C,EAAO,YAAc,MAI3D,SAACC,GAAD,OACEA,EAAWC,QACT,SAACC,EAAQC,GAAT,mBAAC,eACID,GADL,kBAEGC,EAAUC,gBAAkB,CAC3BC,YAAaF,EAAUG,QAAQvB,MAC/BwB,IAAKJ,EAAUpB,OAAS,OAG5B,OCXOyB,EAAoBnC,IAAMC,gBAC1BmC,EAA4BD,EAAkBtB,SAE9CwB,EAA4B,SAAC,GAAkB,IAAhBlC,EAAe,EAAfA,SAClCE,EAAkBU,qBAAWhB,GAA7BM,cADiD,EAEbD,qBAFa,mBAElDkC,EAFkD,KAElCC,EAFkC,OAGLnC,qBAHK,mBAGlDoC,EAHkD,KAG9BC,EAH8B,KAKnDC,EAAkBrB,sBAAW,uCACjC,WAAO5B,GAAP,mBAAAlB,EAAA,sEACmCgB,EAC/Bc,EAAcb,QACdC,GAHJ,gBACUP,EADV,EACUA,MAAOF,EADjB,EACiBA,QAIfuD,EAAkBvD,GAClByD,EAAsBvD,GANxB,2CADiC,sDASjC,CAACmB,IAGGsC,EAAsBtB,uBAAY,WACtCkB,OAAkBhB,GAClBkB,OAAsBlB,KACrB,IAEH,OACE,cAACY,EAAkB1B,SAAnB,CACEC,MAAO,CACL4B,iBACAE,qBACAE,kBACAC,uBALJ,SAQGxC,KClCMyC,EAA4BnB,aAFhB,SAACC,GAAD,OAAW9C,IAAI8C,EAAO,mBAAqB,MAIlE,SAACC,GAAD,OACEA,EAAWC,QACT,SAACC,EAAQC,GAAT,mBAAC,eACID,GADL,kBAEGC,EAAUC,gBAAkB,CAC3BC,YAAaF,EAAUG,QAAQvB,MAC/BmC,WAAYf,EAAUpB,OAAS,OAGnC,OCROoC,EAAgB,WAAO,IAAD,EACE/B,qBAAWJ,GAAtCS,EADyB,EACzBA,SAAUE,EADe,EACfA,aADe,EAEgBP,qBAC/CoB,GADMO,EAFyB,EAEzBA,gBAAiBC,EAFQ,EAERA,oBAFQ,EAKDvC,oBAAS,GALR,mBAK1B2C,EAL0B,KAKhBC,EALgB,OAMK5C,mBAAS,IANd,mBAM1B6C,EAN0B,KAMbC,EANa,OAOC9C,oBAAS,GAPV,mBAO1B+C,EAP0B,KAOfC,EAPe,KAS3BC,EAAahC,uBAAY,WAC7B+B,GAAa,KACZ,IAEGE,EAAejC,uBAAY,YAA4B,IAAfX,EAAc,EAAxB6C,OAAU7C,MACtC8C,EAAY9C,EAAM+C,OAAS,GAAKC,MAAMhD,EAAO,IACnDsC,EAAYQ,GACZN,EAAexC,GACV8C,GAA8B,IAAjB9C,EAAM+C,QACtBL,GAAa,KAEd,IAEGO,EAAoBtC,uBAAY,WACpCC,IACAqB,IACAvB,EAAS6B,GACTP,EAAgBO,KACf,CACD7B,EACAsB,EACApB,EACAqB,EACAM,IAGIW,EAAYb,GAAYI,EACxBU,EAAmBd,KAAcI,GAAeF,GACtD,OACE,eAACa,EAAA,EAAD,CAAKC,QAAQ,OAAOC,cAAc,MAAMC,eAAe,SAASC,EAAG,EAAGC,EAAG,EAAzE,UACE,cAACL,EAAA,EAAD,CAAKI,EAAG,EAAR,SACE,cAACE,EAAA,EAAD,CACElF,MAAO0E,EACPlD,MAAOuC,EACPoB,OAAQhB,EACRiB,SAAUhB,EACViB,QAAQ,WACRC,MAAM,aACNC,WACEb,GAAa,kDAEfc,WAAS,EACTC,UAAQ,MAGZ,cAACb,EAAA,EAAD,CAAKI,EAAG,EAAR,SACE,cAACU,EAAA,EAAD,CACEL,QAAQ,YACRM,MAAM,UACNC,SAAUjB,EACVkB,QAASpB,EAJX,kC,kBC1DKqB,EAAqB,SAAC,GAAkB,IAAhB7E,EAAe,EAAfA,SACnC,OACE,qCACE,cAAC8E,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAWC,SAAS,KAApB,SACE,cAACrB,EAAA,EAAD,CACEC,QAAQ,OACRC,cAAc,SACdoB,QAAQ,mBACRlB,EAAG,EACHC,EAAG,EACHkB,IAAK,CAAEC,MAAO,OAAQC,OAAQ,QANhC,SAQGpF,U,0BCXLqF,EAAQC,YAAe,CAC3BC,UAAW,CACTC,cAAe,CACbC,GAAI,CACFC,SAAU,CAAC,GAAI,cACfC,WAAY,YAMdC,EAAYC,YAAW,CAC3BC,KAAM,CACJX,MAAO,OACPC,OAAQ,UAICW,GAAmB,SAAC,GAAkB,IAAhB/F,EAAe,EAAfA,SAC3BgG,EAAUJ,IAChB,OACE,qBAAKK,UAAWD,EAAQF,KAAxB,SACE,cAACI,EAAA,EAAD,CAAeb,MAAOA,EAAtB,SAA8BrF,O,mBCxBvBmG,GAAoB,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,KAAMxH,EAAW,EAAXA,KACxC,OACE,cAAC+E,EAAA,EAAD,CAAKC,QAAQ,OAAOC,cAAc,MAAMC,eAAe,SAASC,EAAG,EAAnE,SACE,cAACsC,GAAA,EAAD,CAAYjC,QAASgC,EAAME,cAAY,EAAvC,SACG1H,OCHI2H,GAAkBjF,YAC7BD,EACAoB,GACA,SAAC+D,EAAeC,GAAhB,OACEC,OAAOC,KAAKF,GAAsBG,KAAI,SAACC,GACrC,IAAM1E,EAAiBsE,EAAqBI,IAAgB,GACtDhG,EAAU2F,EAAcK,IAAgB,GAC9C,OAAO,yBACLA,eACGhG,GACAsB,SCJL2E,I,qBAAgB,CACpBC,UAAU,EACVC,QAAQ,IAGJC,GAAuB,SAACC,GAC5B,OAAIA,EAAS3G,OCjBmB4G,EDkBLD,EAAS3G,MCjBpC,IAAI6G,KAAKC,aAAa,QAAS,CAC7BC,MAAO,WACPC,SAAU,QACTC,OAAOL,IDgBH,gBCpBwB,IAACA,GDuB5BM,GAAsB,SAACP,GAC3B,OAAIA,EAAS3G,OClBiBmH,EDmBLR,EAAS3G,MClBlC,IAAI6G,KAAKC,aAAa,SAASG,OAAOE,IDoB/B,gBCrBsB,IAACA,GDwBnBC,GAAqB,SAAC,GAAyB,IAAvBjF,EAAsB,EAAtBA,WAAYX,EAAU,EAAVA,IACzC6F,EAAUrB,GAAgB,CAAE7D,aAAYX,QAC9C,OAAuB,IAAnB6F,EAAQtE,OAER,cAAC,GAAD,CAAmB8C,KAAK,KAAKxH,KAAK,wCAIpC,qBAAKqH,UAAU,kBAAkBqB,MAAO,CAAElC,OAAQ,IAAKD,MAAO,KAA9D,SACE,eAAC,eAAD,CAAayC,QAASA,EAASd,cAAeA,GAA9C,UACE,cAAC,gBAAD,CACEe,WAAW,UACXC,MAAM,cACN3C,MAAO,IACP4C,KAAK,QAEP,cAAC,gBAAD,CACEF,WAAW,aACXC,MAAM,aACN3C,MAAO,IACP6C,eAAgBP,KAElB,cAAC,gBAAD,CACEI,WAAW,mBACXC,MAAM,MACN3C,MAAO,IACP6C,eAAgBf,WE/CbgB,GAAb,4JACE,WAAU,IAAD,EAMHC,KAAKC,MAJPhG,EAFK,EAELA,eACAtB,EAHK,EAGLA,QACAwB,EAJK,EAILA,mBACAtB,EALK,EAKLA,YAEIqH,EAAY/F,GAAsBtB,EAClCsH,GAAsBD,KAAejG,IAAmBtB,GAC9D,OACE,cAAC,GAAD,UACE,eAAC,EAAD,WACE,cAAC,GAAD,CACEuF,KAAK,KACLxH,KAAK,wCAEP,cAAC,EAAD,IACCwJ,GACC,cAAC,GAAD,CACEhC,KAAK,QACLxH,KAAK,6CAGRyJ,GACC,cAAC,GAAD,CACEjC,KAAK,QACLxH,KAAK,8FAGPyJ,IAAuBD,GACvB,cAACzE,EAAA,EAAD,CACEI,EAAG,EACHH,QAAQ,OACRC,cAAc,MACdC,eAAe,SAJjB,SAME,cAAC,GAAD,CAAiBpB,WAAYP,EAAgBJ,IAAKlB,eArChE,GAAsCyH,aA8CvBC,IhBnDejL,EgBmDD2K,GhBnDA,4JAEzB,WAAU,IAAD,OACP,OACE,cAACxH,EAAD,UACG,SAAC+H,GAAD,OACC,cAACvG,EAAD,UACG,SAACwG,GAAD,OACC,cAACnL,EAAD,uCACM,EAAK6K,OACLM,GACAD,cAXO,GACT3I,IAAMyI,YiBK1BI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAAC,GAAD,YAKRC,SAASC,eAAe,SAM1BvL,EAAgBwL,QAAQC,O","file":"static/js/main.98df11b7.chunk.js","sourcesContent":["import React from 'react';\nimport { GdpContextConsumer } from '../context/gdp-context';\nimport { PopulationContextConsumer } from '../context/population-context';\n\nexport const withConsumers = (WrappedComponent) =>\n  class App extends React.Component {\n    render() {\n      return (\n        <GdpContextConsumer>\n          {(gdpProps) => (\n            <PopulationContextConsumer>\n              {(populationProps) => (\n                <WrappedComponent\n                  {...this.props}\n                  {...populationProps}\n                  {...gdpProps}\n                />\n              )}\n            </PopulationContextConsumer>\n          )}\n        </GdpContextConsumer>\n      );\n    }\n  };\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const GET_INDICATOR_ENDPOINT =\n  '{baseUrl}/country/{countryId}/indicator/{statsType}?format=json&date={fullYear}';\n\nexport const STATS_TYPE = {\n  POPULATION: 'SP.POP.TOTL',\n  GDP: 'NY.GDP.MKTP.CD',\n};\n","import template from 'lodash/template';\nimport { GET_INDICATOR_ENDPOINT, STATS_TYPE } from '../constants/endpoints';\n\nconst fetchApiData = async (url, options) => {\n  const response = await fetch(url, options);\n\n  if (response.ok) {\n    const payload =\n      response.headers.get('Content-Type').indexOf('application/json') !== -1\n        ? await response.json()\n        : await response.text();\n    return { payload };\n  }\n  const message = await response.json();\n  return {\n    error: {\n      status: response.status,\n      message,\n    },\n  };\n};\n\nconst endpointTemplate = template(GET_INDICATOR_ENDPOINT, {\n  interpolate: /{([\\s\\S]+?)}/g,\n});\n\nexport const fetchPopulationFromWorldBank = async (baseUrl, fullYear) => {\n  const populationEndpoint = endpointTemplate({\n    baseUrl,\n    countryId: 'all',\n    statsType: STATS_TYPE.POPULATION,\n    fullYear,\n  });\n\n  return await fetchApiData(populationEndpoint);\n};\n\nexport const fetchGDPFromWorldBank = async (baseUrl, fullYear) => {\n  const populationEndpoint = endpointTemplate({\n    baseUrl,\n    countryId: 'all',\n    statsType: STATS_TYPE.GDP,\n    fullYear,\n  });\n\n  return await fetchApiData(populationEndpoint);\n};\n\nexport const fetchEnvConfig = async () =>\n  await fetchApiData('configuration.json');\n","import React, { useEffect, useState } from 'react';\nimport { fetchEnvConfig } from '../../utils/http';\n\nexport const EnvConfigContext = React.createContext();\n\nexport const EnvConfigContextProvider = ({ children }) => {\n  const [envConfigData, setEnvConfigData] = useState();\n  const [error, setError] = useState();\n\n  useEffect(() => {\n    fetchEnvConfig().then(({ error, payload }) => {\n      setEnvConfigData(payload);\n      setError(error);\n    });\n  }, []);\n\n  return (\n    <EnvConfigContext.Provider value={{ envConfigData, error }}>\n      {envConfigData ? children : <div>Loading app...</div>}\n      {error && <div>Something gone wrong while fetching config</div>}\n    </EnvConfigContext.Provider>\n  );\n};\n","import React, { useCallback, useContext, useState } from 'react';\nimport { fetchGDPFromWorldBank } from '../../utils/http';\nimport { EnvConfigContext } from '../env-config-context';\n\nexport const GdpContext = React.createContext();\nexport const GdpContextConsumer = GdpContext.Consumer;\n\nexport const GdpContextProvider = ({ children }) => {\n  const { envConfigData } = useContext(EnvConfigContext);\n  const [gdpData, setGdpData] = useState();\n  const [gdpApiError, setGdpApiError] = useState();\n\n  const fetchGdp = useCallback(\n    async (fullYear) => {\n      const { error, payload } = await fetchGDPFromWorldBank(\n        envConfigData.baseUrl,\n        fullYear\n      );\n      setGdpData(payload);\n      setGdpApiError(error);\n    },\n    [envConfigData]\n  );\n\n  const resetGdpData = useCallback(() => {\n    setGdpData(undefined);\n    setGdpApiError(undefined);\n  }, []);\n\n  return (\n    <GdpContext.Provider\n      value={{ gdpData, gdpApiError, fetchGdp, resetGdpData }}\n    >\n      {children}\n    </GdpContext.Provider>\n  );\n};\n","import get from 'lodash/get';\nimport { createSelector } from 'reselect';\nconst selectIndicators = (state) => get(state, 'gdp.[1]') || [];\n\nexport const selectFormattedGdp = createSelector(\n  selectIndicators,\n  (indicators) =>\n    indicators.reduce(\n      (result, indicator) => ({\n        ...result,\n        [indicator.countryiso3code]: {\n          countryName: indicator.country.value,\n          gdp: indicator.value || 0,\n        },\n      }),\n      {}\n    )\n);\n","import React, { useCallback, useContext, useState } from 'react';\nimport { fetchPopulationFromWorldBank } from '../../utils/http';\nimport { EnvConfigContext } from '../env-config-context';\n\nexport const PopulationContext = React.createContext();\nexport const PopulationContextConsumer = PopulationContext.Consumer;\n\nexport const PopulationContextProvider = ({ children }) => {\n  const { envConfigData } = useContext(EnvConfigContext);\n  const [populationData, setPopulationData] = useState();\n  const [populationApiError, setPopulationApiError] = useState();\n\n  const fetchPopulation = useCallback(\n    async (fullYear) => {\n      const { error, payload } = await fetchPopulationFromWorldBank(\n        envConfigData.baseUrl,\n        fullYear\n      );\n      setPopulationData(payload);\n      setPopulationApiError(error);\n    },\n    [envConfigData]\n  );\n\n  const resetPopulationData = useCallback(() => {\n    setPopulationData(undefined);\n    setPopulationApiError(undefined);\n  }, []);\n\n  return (\n    <PopulationContext.Provider\n      value={{\n        populationData,\n        populationApiError,\n        fetchPopulation,\n        resetPopulationData,\n      }}\n    >\n      {children}\n    </PopulationContext.Provider>\n  );\n};\n","import get from 'lodash/get';\nimport { createSelector } from 'reselect';\nconst selectIndicators = (state) => get(state, 'population.[1]') || [];\n\nexport const selectFormattedPopulation = createSelector(\n  selectIndicators,\n  (indicators) =>\n    indicators.reduce(\n      (result, indicator) => ({\n        ...result,\n        [indicator.countryiso3code]: {\n          countryName: indicator.country.value,\n          population: indicator.value || 0,\n        },\n      }),\n      {}\n    )\n);\n","import { useCallback, useContext, useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Box from '@material-ui/core/Box';\nimport { GdpContext } from '../../context/gdp-context';\nimport { PopulationContext } from '../../context/population-context';\n\nexport const SearchBoxView = () => {\n  const { fetchGdp, resetGdpData } = useContext(GdpContext);\n  const { fetchPopulation, resetPopulationData } = useContext(\n    PopulationContext\n  );\n  const [hasError, setHasError] = useState(false);\n  const [searchValue, setSearchValue] = useState('');\n  const [isTouched, setIsTouched] = useState(false);\n\n  const handleBlur = useCallback(() => {\n    setIsTouched(true);\n  }, []);\n\n  const handleChange = useCallback(({ target: { value } }) => {\n    const isInValid = value.length < 4 || isNaN(value, 10);\n    setHasError(isInValid);\n    setSearchValue(value);\n    if (!isInValid && value.length === 4) {\n      setIsTouched(true);\n    }\n  }, []);\n\n  const handleSearchClick = useCallback(() => {\n    resetGdpData();\n    resetPopulationData();\n    fetchGdp(searchValue);\n    fetchPopulation(searchValue);\n  }, [\n    fetchGdp,\n    fetchPopulation,\n    resetGdpData,\n    resetPopulationData,\n    searchValue,\n  ]);\n\n  const showError = hasError && isTouched;\n  const isButtonDisabled = hasError || !(isTouched && !!searchValue);\n  return (\n    <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"center\" p={1} m={1}>\n      <Box p={1}>\n        <TextField\n          error={showError}\n          value={searchValue}\n          onBlur={handleBlur}\n          onChange={handleChange}\n          variant=\"outlined\"\n          label=\"Enter Year\"\n          helperText={\n            showError && 'Enter 4 digit full year, e.g. 2019, 1997 etc...'\n          }\n          fullWidth\n          required\n        />\n      </Box>\n      <Box p={2}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={isButtonDisabled}\n          onClick={handleSearchClick}\n        >\n          Get statistics\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n","import CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\nimport Box from '@material-ui/core/Box';\n\nexport const AppLayoutContainer = ({ children }) => {\n  return (\n    <>\n      <CssBaseline />\n      <Container maxWidth=\"md\">\n        <Box\n          display=\"flex\"\n          flexDirection=\"column\"\n          bgcolor=\"background.paper\"\n          p={1}\n          m={1}\n          css={{ width: '100%', height: '100%' }}\n        >\n          {children}\n        </Box>\n      </Container>\n    </>\n  );\n};\n","import {\n  ThemeProvider,\n  createMuiTheme,\n  makeStyles,\n} from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n  overrides: {\n    MuiTypography: {\n      h1: {\n        fontSize: [22, '!important'],\n        fontWeight: 'bold',\n      },\n    },\n  },\n});\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n    height: '100%',\n  },\n});\n\nexport const AppThemeProvider = ({ children }) => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <ThemeProvider theme={theme}>{children}</ThemeProvider>\n    </div>\n  );\n};\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\n\nexport const TypographyWithBox = ({ type, text }) => {\n  return (\n    <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"center\" p={1}>\n      <Typography variant={type} gutterBottom>\n        {text}\n      </Typography>\n    </Box>\n  );\n};\n","import { createSelector } from 'reselect';\n\nimport { selectFormattedGdp } from '../gdp-context';\nimport { selectFormattedPopulation } from '../population-context';\n\nexport const selectTableData = createSelector(\n  selectFormattedGdp,\n  selectFormattedPopulation,\n  (gdpIndicators, populationIndicators) =>\n    Object.keys(populationIndicators).map((countryCode) => {\n      const populationData = populationIndicators[countryCode] || {};\n      const gdpData = gdpIndicators[countryCode] || {};\n      return {\n        countryCode,\n        ...gdpData,\n        ...populationData,\n      };\n    })\n);\n","import React from 'react';\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\nimport { TypographyWithBox } from '../TypographyWithBox';\nimport { selectTableData } from '../../context/shared/selectors';\nimport { currencyFormatter, numberFormatter } from '../../utils/number';\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\n\nimport './table-styles.scss';\n\nconst defaultColDef = {\n  sortable: true,\n  filter: true,\n};\n\nconst gdpCurrencyFormatter = (cellData) => {\n  if (cellData.value) {\n    return currencyFormatter(cellData.value);\n  }\n  return 'Not available';\n};\n\nconst populationFormatter = (cellData) => {\n  if (cellData.value) {\n    return numberFormatter(cellData.value);\n  }\n  return 'Not available';\n};\n\nexport const GridTableContainer = ({ population, gdp }) => {\n  const rowData = selectTableData({ population, gdp });\n  if (rowData.length === 0) {\n    return (\n      <TypographyWithBox type=\"h6\" text=\"Data not found at World Bank center\" />\n    );\n  }\n  return (\n    <div className=\"ag-theme-alpine\" style={{ height: 400, width: 900 }}>\n      <AgGridReact rowData={rowData} defaultColDef={defaultColDef}>\n        <AgGridColumn\n          headerName=\"Country\"\n          field=\"countryName\"\n          width={400}\n          sort=\"asc\"\n        ></AgGridColumn>\n        <AgGridColumn\n          headerName=\"Population\"\n          field=\"population\"\n          width={250}\n          valueFormatter={populationFormatter}\n        ></AgGridColumn>\n        <AgGridColumn\n          headerName=\"GDP (US dollars)\"\n          field=\"gdp\"\n          width={250}\n          valueFormatter={gdpCurrencyFormatter}\n        ></AgGridColumn>\n      </AgGridReact>\n    </div>\n  );\n};\n","export const currencyFormatter = (amount) =>\n  new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n  }).format(amount);\n\nexport const numberFormatter = (number) =>\n  new Intl.NumberFormat('en-US').format(number);\n","import React, { Component } from 'react';\nimport Box from '@material-ui/core/Box';\nimport { SearchBox } from '../search-box';\nimport { AppLayout } from '../../layout/app-container';\nimport { ThemeProvider } from '../../layout/theme-provider';\nimport { StatisticsTable } from '../statistics-table';\nimport { TypographyWithBox } from '../TypographyWithBox';\nimport { withConsumers } from '../../hoc/withConsumers';\n\nexport class RDTAppManagement extends Component {\n  render() {\n    const {\n      populationData,\n      gdpData,\n      populationApiError,\n      gdpApiError,\n    } = this.props;\n    const hasErrors = populationApiError || gdpApiError;\n    const isDataNotAvailable = !hasErrors && (!populationData || !gdpData);\n    return (\n      <ThemeProvider>\n        <AppLayout>\n          <TypographyWithBox\n            type=\"h1\"\n            text=\"RDT Document Management Communicate\"\n          />\n          <SearchBox />\n          {hasErrors && (\n            <TypographyWithBox\n              type=\"body1\"\n              text=\"Something went wrong while fetching data\"\n            />\n          )}\n          {isDataNotAvailable && (\n            <TypographyWithBox\n              type=\"body1\"\n              text=\"Use search box to get Population and GDP statistics from world bank for a specific year.\"\n            />\n          )}\n          {!isDataNotAvailable && !hasErrors && (\n            <Box\n              p={1}\n              display=\"flex\"\n              flexDirection=\"row\"\n              justifyContent=\"center\"\n            >\n              <StatisticsTable population={populationData} gdp={gdpData} />\n            </Box>\n          )}\n        </AppLayout>\n      </ThemeProvider>\n    );\n  }\n}\n\nexport default withConsumers(RDTAppManagement);\n","import 'whatwg-fetch';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport { RDTDocumentManagement } from './components/app-management';\nimport { PopulationContextProvider } from './context/population-context';\nimport { GdpContextProvider } from './context/gdp-context';\nimport { EnvConfigContextProvider } from './context/env-config-context';\n\nReactDOM.render(\n  <React.StrictMode>\n    <EnvConfigContextProvider>\n      <PopulationContextProvider>\n        <GdpContextProvider>\n          <RDTDocumentManagement />\n        </GdpContextProvider>\n      </PopulationContextProvider>\n    </EnvConfigContextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}